#//-----------------------------------------------------------------------------
#//	TIER1.VPC
#//
#//	Project Script
#//-----------------------------------------------------------------------------

cmake_minimum_required(VERSION 3.16)
project(tier1_client)
set(SRCDIR "${CMAKE_SOURCE_DIR}")
set(CMAKE_MODULE_PATH ${SRCDIR}/cmake)
set(OUTLIBNAME "tier1_client")

include(${CMAKE_MODULE_PATH}/detect_platform.cmake)
include(${CMAKE_MODULE_PATH}/source_lib_base.cmake)

add_definitions(-DTIER1_STATIC_LIB)

if( LINUXALL )
    target_compile_options(${OUTLIBNAME} PRIVATE -fpic -fno-semantic-interposition)
    #target_compile_options(${OUTLIBNAME} PRIVATE -fpermissive)
endif()

target_sources(${OUTLIBNAME} PRIVATE "../utils/lzma/C/LzmaDec.c")
target_sources(${OUTLIBNAME} PRIVATE "bitbuf.cpp")
target_sources(${OUTLIBNAME} PRIVATE "byteswap.cpp")
target_sources(${OUTLIBNAME} PRIVATE "characterset.cpp")
target_sources(${OUTLIBNAME} PRIVATE "checksum_crc.cpp")
target_sources(${OUTLIBNAME} PRIVATE "checksum_md5.cpp")
target_sources(${OUTLIBNAME} PRIVATE "checksum_sha1.cpp")
target_sources(${OUTLIBNAME} PRIVATE "commandbuffer.cpp")
target_sources(${OUTLIBNAME} PRIVATE "convar.cpp")
target_sources(${OUTLIBNAME} PRIVATE "datamanager.cpp")
target_sources(${OUTLIBNAME} PRIVATE "diff.cpp")
target_sources(${OUTLIBNAME} PRIVATE "generichash.cpp")
target_sources(${OUTLIBNAME} PRIVATE "ilocalize.cpp")
target_sources(${OUTLIBNAME} PRIVATE "interface.cpp")
target_sources(${OUTLIBNAME} PRIVATE "KeyValues.cpp")
target_sources(${OUTLIBNAME} PRIVATE "keyvaluesjson.cpp")
target_sources(${OUTLIBNAME} PRIVATE "kvpacker.cpp")
target_sources(${OUTLIBNAME} PRIVATE "lzmaDecoder.cpp")
target_sources(${OUTLIBNAME} PRIVATE "lzss.cpp") # [!$SOURCESDK]
target_sources(${OUTLIBNAME} PRIVATE "mempool.cpp")
target_sources(${OUTLIBNAME} PRIVATE "memstack.cpp")
target_sources(${OUTLIBNAME} PRIVATE "NetAdr.cpp")
target_sources(${OUTLIBNAME} PRIVATE "newbitbuf.cpp")
target_sources(${OUTLIBNAME} PRIVATE "rangecheckedvar.cpp")
target_sources(${OUTLIBNAME} PRIVATE "reliabletimer.cpp")
target_sources(${OUTLIBNAME} PRIVATE "snappy-sinksource.cpp")
target_sources(${OUTLIBNAME} PRIVATE "snappy-stubs-internal.cpp")
target_sources(${OUTLIBNAME} PRIVATE "snappy.cpp")
target_sources(${OUTLIBNAME} PRIVATE "sparsematrix.cpp")
target_sources(${OUTLIBNAME} PRIVATE "splitstring.cpp")
target_sources(${OUTLIBNAME} PRIVATE "stringpool.cpp")
target_sources(${OUTLIBNAME} PRIVATE "strtools.cpp")
target_sources(${OUTLIBNAME} PRIVATE "strtools_unicode.cpp")
target_sources(${OUTLIBNAME} PRIVATE "tier1.cpp")
target_sources(${OUTLIBNAME} PRIVATE "tokenreader.cpp")
target_sources(${OUTLIBNAME} PRIVATE "uniqueid.cpp")
target_sources(${OUTLIBNAME} PRIVATE "utlbinaryblock.cpp")
target_sources(${OUTLIBNAME} PRIVATE "utlbuffer.cpp")
target_sources(${OUTLIBNAME} PRIVATE "utlbufferutil.cpp")
target_sources(${OUTLIBNAME} PRIVATE "utlstring.cpp")
target_sources(${OUTLIBNAME} PRIVATE "utlsymbol.cpp")
if(WINDOWS)
    target_sources(${OUTLIBNAME} PRIVATE "processor_detect.cpp")
elseif(LINUXALL)
			#'pathmatch.cpp',
    target_sources(${OUTLIBNAME} PRIVATE "processor_detect_linux.cpp")
    target_sources(${OUTLIBNAME} PRIVATE "qsort_s.cpp")
endif()
